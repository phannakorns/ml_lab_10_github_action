# ชื่อของ Workflow
name: MLOps Pipeline CI/CT/CD

# กำหนดเงื่อนไขการรัน: เมื่อมีการ push หรือ pull request ไปยัง branch 'main'
on:
  push:
    branches: [ "main" ]  
  pull_request:
    branches: [ "main" ]

jobs:
  # --- JOB ใหม่ที่เพิ่มเข้ามาสำหรับ CI ---
  ci-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # การดึงโค้ด (checkout) จาก Repository ของคุณลงมาไว้บนเครื่อง

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # แก้ไข Path ให้ถูกต้อง: requirements.txt อยู่ในโฟลเดอร์ scripts
        pip install -r scripts/requirements.txt
        # ติดตั้ง flake8 และ pytest ที่จำเป็นสำหรับ CI
        pip install flake8 pytest

    - name: Lint with flake8
      # แก้ไข Path ให้ถูกต้อง: โฟลเดอร์ scripts อยู่ที่ root
      run: |
        flake8 scripts --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      # pytest จะตรวจสอบไฟล์ทดสอบในโฟลเดอร์ scripts โดยอัตโนมัติ
      run: |
        pytest || (if [ $? -eq 5 ]; then echo "Pytest finished: No tests found."; exit 0; else exit $?; fi)

  build-and-train:
    # ทำให้ job นี้ต้องรันหลังจาก ci-checks สำเร็จเท่านั้น
    needs: ci-checks
    runs-on: ubuntu-latest
    # การใช้ GitHub Secrets เป็นสิ่งจำเป็นสำหรับ MLflow Server
    # env:
    #   MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
    #   MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
    #   MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      # ติดตั้งเฉพาะไลบรารีที่จำเป็นสำหรับ job นี้
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt

    - name: Run Data Validation
      # แก้ไข Path ให้ถูกต้อง
      run: python scripts/01_data_validation.py

    - name: Run Data Preprocessing
      id: preprocessing
      # เพิ่ม id เพื่อให้สามารถอ้างอิง output จาก step นี้ได้
      run: |
        # การใช้ `grep` เพื่อดึงค่า Preprocessing Run ID
        RUN_ID=$(python scripts/02_data_preprocessing.py | grep "Preprocessing Run ID:" | awk '{print $NF}')
        # กำหนดค่า Run ID เป็น output ของ step นี้
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

    - name: Run Model Training, Evaluation, and Registration
      # ใช้ run_id ที่ได้จาก step ก่อนหน้า
      run: python scripts/03_train_evaluate_register.py 150a2984af454f13979b3adea77597b9 10.0

    - name: Transition Model to Staging
      # เปลี่ยนชื่อโมเดลเป็น 'iris-classifier-prod'
      if: success()
      run: python scripts/04_transition_model.py "iris-classifier-prod" "Staging"

    - name: Load and Predict Model
      # รันสคริปต์ทำนายผลและบันทึก output ลงในไฟล์
      run: python scripts/04_load_and_predict.py > prediction_results.txt
      
    - name: Upload Prediction Results
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: prediction-results
        path: prediction_results.txt
        retention-days: 5
